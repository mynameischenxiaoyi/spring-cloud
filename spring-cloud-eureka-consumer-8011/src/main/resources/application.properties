server.port=8011
#注册到eureka服务端的微服务名称
spring.application.name=ms-consumer-user
#注册到eureka服务端的地址
eureka.client.service-url.defaultZone=http://localhost:9000/eureka/
#点击具体的微服务，右下角是否显示ip
eureka.instance.prefer-ip-address=true
#显示微服务的名称
eureka.instance.instance-id=ms-consumer-user-8011

#日志级别
feign.client.config.ms-consumer-provide.logger-level=full

#打开feign对hystrix的支持
feign.hystrix.enabled=true


ribbon.ConnectTimeout=5000
ribbon.ReadTimeout=10000
# 设置熔断超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000
# 设置是否开始超时限制
hystrix.command.default.execution.execution.timeout.enabled=true

#如何配置好Hystrix和Ribbon的超时时间呢？
# 默认没有开启重试机制
#其实是有套路的,因为Feign的请求：其实是Hystrix+Ribbon。Hystrix在最外层，然后再到Ribbon，
#最后里面的是http请求。所以说。Hystrix的熔断时间必须大于Ribbon的 ( ConnectTimeout + ReadTimeout )。
#  而如果Ribbon开启了重试机制，还需要乘以对应的重试次数，保证在Ribbon里的请求还没结束时，Hystrix的熔断时间不会超时

#actuator（健康监控）配置和使用
management.security.enabled=false


#zipkin服务信息发送地址
spring.zipkin.base-url=http://localhost:9411/
spring.sleuth.web.client.enabled=true
# 抽样率，默认0.1 1全抽取
spring.sleuth.sampler.probability=1
#logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG
logging.level.org.springframework.cloud.sleuth=debug






